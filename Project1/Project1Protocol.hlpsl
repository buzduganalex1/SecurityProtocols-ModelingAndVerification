% 1. A -> B: A
% 2. B -> A: {A,Nb'})_Kbs
% 3. A -> S: A,B,Na,{A,Nb'}_Kbs
% 4. S -> A: {Na,Kab,B,{Kab,A,Nb'}Kbs}Kas
% 5. A -> B: {Kab,A,Nb'}_Kbs, {Na',A}_Kab
% 6. B -> A: {Nb'.B}_Kab

role alice (A,B,S : agent,
            K_AS : symmetric_key,
            Snd,Rcv : channel(dy)) 
        
played_by A def=     

    local State: nat,
          Na,Nb: text,
          K_AB, K_BS:symmetric_key

    init State:=0

    transition
        1. State=0 /\ Rcv(start)
            =|> State':=1 /\ Snd(A)

        2. State=1 /\ Rcv({A.Nb'}_K_BS')
            =|> State':=2 /\ Na':=new() 
                          /\ Snd({A.B.Na'.{A.Nb'}_K_BS'}_K_AS)

        3. State=2 /\ Rcv({K_AB'.Na.B.{K_AB'.A.Nb}_K_BS}_K_AS)
            =|> State':=3 /\ Snd({K_AB.A.Nb}_K_BS)

        4. State=3 /\ Rcv(B)
            =|> State':=4 /\ Na':=new() 
                          /\ Snd({Na'.A}_K_AB)   
                          /\ witness(A,B,alice_bob_na,Na')   

        5. State=4 /\ Rcv({Nb'.B}_K_AB)
            =|> State':=5 /\ wrequest(A,B,bob_alice_nb, Nb')
end role

role bob (B,A,S: agent,
          K_BS: symmetric_key,
          Snd,Rcv: channel(dy)) 

played_by B def=

    local State: nat,
          Na,Nb: text,
          K_AB: symmetric_key

    init State:=0

    transition
        1. State=0 /\ Rcv(A')
            =|> State':=1 /\ Nb':=new()
                          /\ Snd({A.Nb'}_K_BS)

        2. State=1 /\ Rcv({K_AB'.A'.Nb'}_K_BS) 
            =|> State':=2 /\ Snd(B)
            
        3. State=2 /\ Rcv({Na'.A}_K_AB)                
            =|> State':=3 /\ Nb':=new() 
                          /\ Snd({Nb'.B}_K_AB)  
                          /\ wrequest(B,A,alice_bob_na,Na')
                          /\ witness(B,A,bob_alice_nb,Nb') 
end role

role server (S: agent,
             K_AS,K_BS: symmetric_key,
             Snd, Rcv: channel(dy))
              
played_by S def=
    
    local A,B : agent,
          Na,Nb : text,
          K_AB : symmetric_key

    transition
     1. Rcv({A'.B'.Na'.{A'.Nb'}_K_BS'}_K_AS)
        =|> K_AB':=new() /\ Snd({K_AB'.Na.B.{K_AB'.A.Nb}_K_BS}_K_AS)
                         /\ secret(K_AB', skab, {A,B,S})
        
end role

role securityProtocol(A,B,S: agent,
                      K_AS,K_BS: symmetric_key,
                      Snd,Rcv : channel(dy)) def=
    
    composition
        alice(A,B,S,K_AS,Snd,Rcv) /\
        server(S,K_AS,K_BS,Snd,Rcv) /\
        bob(B,A,S,K_BS,Snd,Rcv) 
                      
end role

role environment() def=

    local Snd, Rcv: channel(dy)

    const a, b, s, i: agent,
          k_as, k_bs, k_is: symmetric_key,
          ki: public_key,
          sna,snb,alice_bob_na, skab,bob_alice_nb: protocol_id

    intruder_knowledge = {a,b,s,i,k_is,inv(ki)}

    composition
        securityProtocol(a,b,s,k_as,k_bs,Snd,Rcv) /\
        % securityProtocol(i,b,s,k_is,k_bs,Snd,Rcv) /\
        securityProtocol(a,i,s,k_as,k_is,Snd,Rcv) 

end role

goal
    % weak_authentication_on alice_bob_na
    % works like this
    weak_authentication_on bob_alice_nb
    secrecy_of skab
end goal

environment()