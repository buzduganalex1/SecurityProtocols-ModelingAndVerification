%Security protocol used for change of keys

role alice (A,B : agent,
            Ka,Kb : public_key,
            Snd,Rcv : channel(dy)) 
        
played_by A def=     

    local State: nat,
          Na,Nb: text
    
    init State:=0

    transition
        1. State = 0 /\ Rcv(start)
            =|> State':=1 /\ Na':=new() 
                          /\ Snd({Na'.A}_Kb)

        2. State = 1 /\ Rcv({Nb'.B}_Ka)
            =|> State':=2 /\ Snd({Nb'}_Kb)

end role

role bob (B,A : agent,
        Kb,Ka : public_key,
        Snd,Rcv : channel(dy)) 

played_by B def=

    local State : nat,
          Na,Nb : text

    init State:=0

    transition
        1. State = 0 /\ Rcv({Na'.A}_Kb)
            =|> State':=1 /\ Nb':=new()
                          /\ Snd({Nb'.B}_Ka)
        
        2. State = 1 /\ Rcv({Nb}_Kb)
            =|> State':=2

end role

% role S
% end role

role securityProtocol(A,B: agent,
                      Ka,Kb: public_key,
                      Snd,Rcv : channel(dy)) def=
    
    composition
        alice(A,B,Ka,Kb,Snd,Rcv) /\
        bob(B,A,Kb,Ka,Snd,Rcv) 
                      
end role

role environment() def=

    local Snd, Rcv: channel(dy)

    const a, b, i: agent,
          ka, kb, ki: public_key,
          sna, snb: protocol_id

    intruder_knowledge = {a,b,i,ka,kb,inv(ki)}

    composition
        securityProtocol(a,b,ka,kb,Snd,Rcv) /\
        securityProtocol(a,i,ka,ki,Snd,Rcv) /\
        securityProtocol(i,b,ki,kb,Snd,Rcv) 

end role

goal
    % authentication_on sna
end goal

environment()