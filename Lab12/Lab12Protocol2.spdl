# Yahalom
#
# Modelled after the description in the SPORE library
# http://www.lsv.ens-cachan.fr/spore/yahalom.html
#
#

usertype SessionKey;

protocol yahalom(I,R,S)
{
    role I
    {
        fresh Ni: Nonce;
        var Nr: Nonce;
        var T: Ticket;
        var Kir: SessionKey;

        send_1(I,R, I,Ni);
        recv_3(S,I, {R,Kir,Ni,Nr}k(I,S), T );
        send_4(I,R, T, {Nr}Kir );

        claim_I1(I, Secret,Kir);
        claim(I,Alive);
		claim(I,Weakagree);
        claim(I,Niagree);
		claim(I,Nisynch);
    }

    role R
    {
        fresh Nr: Nonce;
        var Ni: Nonce;
        var T: Ticket;
        var Kir: SessionKey;

        recv_1(I,R, I,Ni);
        send_2(R,S, R, {I,Ni,Nr}k(R,S) );
        recv_4(I,R, {I,Kir}k(R,S) , {Nr}Kir );

        claim_R1(R, Secret,Kir);
        claim(R,Alive);
		claim(R,Weakagree);
        claim(R,Niagree);
		claim(R,Nisynch);
    }

    role S
    {
        fresh Kir: SessionKey;
        var Ni,Nr: Nonce;

        recv_2(R,S, R, {I,Ni,Nr}k(R,S) );
        send_3(S,I, {R,Kir,Ni,Nr}k(I,S), {I,Kir}k(R,S) );

        claim(S, Secret, Ni);
        claim(S, Secret, Nr);
    }
}

// 1. Aliveness 
// A protocol guarantees to an agent a in role A aliveness
// of an agent b in role B if, whenever a completes a run of role A, believing to be
// communicating with b, then b has previously been running the protocol.

// 2. Weak agreement
// A protocol guarantees to an agent a in role A
// weak agreement of an agent b if, whenever a completes a run of role A,
// believing to be communicating with b, then
// ■ b has been running the protocol believing to be communicating with a.

// 3. Non-injective agreement
// A protocol guarantees to an agent a in
// role A non-injective agreement of an agent b if, whenever a completes a run of
// role A, believing to be communicating with b, then
// ■ b has been running the protocol believing to be communicating with a and
// ■ a and b agree on the contents of all the messages exchanged

// 4. Non-injective synchronization
